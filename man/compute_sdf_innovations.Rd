% Generated by roxygen2: do not edit by hand
% Please edit documentation in R/compute_sdf_innovations.R
\name{compute_sdf_innovations}
\alias{compute_sdf_innovations}
\title{Compute SDF Innovations Time Series}
\usage{
compute_sdf_innovations(
  yields,
  term_premia,
  i,
  return_df = FALSE,
  dates = NULL
)
}
\arguments{
\item{yields}{Data frame with columns y1, y2, ..., containing yields}

\item{term_premia}{Data frame with columns tp1, tp2, ..., containing term premia}

\item{i}{Integer specifying the maturity index (column) to analyze.
Must be between 1 and ncol(yields). Corresponds to maturity in years
for ACM dataset (i=1 is 1-year, i=2 is 2-year, ..., i=10 is 10-year).
The maturity index determines which yield curve point is used in the analysis.}

\item{return_df}{Logical, if TRUE returns a data frame with dates (default FALSE)}

\item{dates}{Optional vector of dates corresponding to the rows in yields/term_premia.
If not provided and return_df = TRUE, will use row indices.}
}
\value{
Numeric vector of computed values, or data frame with dates if return_df = TRUE
}
\description{
Computes the time series of SDF innovations given by:
exp(n_hat(i,t)) * (Delta_(t+1)p_(t+i)^(1) + 0.5*(Delta_(t+1)p_(t+i)^(1))^2 -
0.5*E\[(Delta_(t+1)p_(t+i)^(1))^2\])
}
\details{
The SDF innovation is computed as:
exp(n_hat(i,t)) * (Delta_(t+1)p_(t+i)^(1) + 0.5*(Delta_(t+1)p_(t+i)^(1))^2 -
0.5*E\[(Delta_(t+1)p_(t+i)^(1))^2\])

Where:
\itemize{
\item Delta_(t+1)p_(t+i)^(1) = n_hat(i-1,t+1) - n_hat(i,t)
\item E\[(Delta_(t+1)p_(t+i)^(1))^2\] = (1/(T-1)) * sum(n_hat(i-1,t+1) - n_hat(i,t))^2
for t=1 to T-1
}
}
\examples{
\dontrun{
# Extract ACM data - need maturities 1, i-1, i, i+1 for maturity i
# For i=5, we need maturities 1, 4, 5, 6
data <- extract_acm_data(
  data_types = c("yields", "term_premia"),
  maturities = c(1, 4, 5, 6)
)
yields <- data[, grep("^y", names(data))]
term_premia <- data[, grep("^tp", names(data))]

# Compute SDF innovations for i=5
sdf_innovations_5 <- compute_sdf_innovations(yields, term_premia, i = 5)

# Compute SDF innovations with dates
sdf_innovations_5_df <- compute_sdf_innovations(
  yields, term_premia,
  i = 5,
  return_df = TRUE,
  dates = data$date
)
}

}
